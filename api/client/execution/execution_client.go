// Code generated by go-swagger; DO NOT EDIT.

package execution

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new execution API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for execution API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateExecution creates a new execution

Adds a new execution into Testra app. It takes a JSON object containing a name that was not used before.
*/
func (a *Client) CreateExecution(params *CreateExecutionParams) (*CreateExecutionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateExecutionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createExecution",
		Method:             "POST",
		PathPattern:        "/projects/{projectId}/executions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateExecutionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateExecutionCreated), nil

}

/*
DeleteExecution deletes execution info
*/
func (a *Client) DeleteExecution(params *DeleteExecutionParams) (*DeleteExecutionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteExecutionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteExecution",
		Method:             "DELETE",
		PathPattern:        "/projects/{projectId}/executions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteExecutionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteExecutionOK), nil

}

/*
GetExecution gets execution by id

Returns single execution info for the given id
*/
func (a *Client) GetExecution(params *GetExecutionParams) (*GetExecutionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExecutionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExecution",
		Method:             "GET",
		PathPattern:        "/projects/{projectId}/executions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetExecutionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExecutionOK), nil

}

/*
GetExecutionResultStats gets test execution s result stats

Returns passed, failed and other results count
*/
func (a *Client) GetExecutionResultStats(params *GetExecutionResultStatsParams) (*GetExecutionResultStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExecutionResultStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExecutionResultStats",
		Method:             "GET",
		PathPattern:        "/projects/{projectId}/executions/{id}/result-stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetExecutionResultStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExecutionResultStatsOK), nil

}

/*
GetExecutions lists all executions

Returns list of all executions within given project

*/
func (a *Client) GetExecutions(params *GetExecutionsParams) (*GetExecutionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExecutionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExecutions",
		Method:             "GET",
		PathPattern:        "/projects/{projectId}/executions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetExecutionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExecutionsOK), nil

}

/*
RecentExecutions recents executions

Returns list of recent executions sorted by start time

*/
func (a *Client) RecentExecutions(params *RecentExecutionsParams) (*RecentExecutionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRecentExecutionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "recentExecutions",
		Method:             "GET",
		PathPattern:        "/executions/recents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RecentExecutionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RecentExecutionsOK), nil

}

/*
UpdateExecution updates execution info

Updates exiting execution using execution id

*/
func (a *Client) UpdateExecution(params *UpdateExecutionParams) (*UpdateExecutionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateExecutionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateExecution",
		Method:             "PUT",
		PathPattern:        "/projects/{projectId}/executions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateExecutionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateExecutionOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
