// Code generated by go-swagger; DO NOT EDIT.

package execution

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/testra/testra-cli/api/models"
)

// GetExecutionReader is a Reader for the GetExecution structure.
type GetExecutionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetExecutionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetExecutionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetExecutionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetExecutionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetExecutionOK creates a GetExecutionOK with default headers values
func NewGetExecutionOK() *GetExecutionOK {
	return &GetExecutionOK{}
}

/*GetExecutionOK handles this case with default header values.

Successful response of given Execution
*/
type GetExecutionOK struct {
	Payload *models.Execution
}

func (o *GetExecutionOK) Error() string {
	return fmt.Sprintf("[GET /projects/{projectId}/executions/{id}][%d] getExecutionOK  %+v", 200, o.Payload)
}

func (o *GetExecutionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Execution)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExecutionNotFound creates a GetExecutionNotFound with default headers values
func NewGetExecutionNotFound() *GetExecutionNotFound {
	return &GetExecutionNotFound{}
}

/*GetExecutionNotFound handles this case with default header values.

Execution not found
*/
type GetExecutionNotFound struct {
	Payload *models.ErrorResponse
}

func (o *GetExecutionNotFound) Error() string {
	return fmt.Sprintf("[GET /projects/{projectId}/executions/{id}][%d] getExecutionNotFound  %+v", 404, o.Payload)
}

func (o *GetExecutionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExecutionDefault creates a GetExecutionDefault with default headers values
func NewGetExecutionDefault(code int) *GetExecutionDefault {
	return &GetExecutionDefault{
		_statusCode: code,
	}
}

/*GetExecutionDefault handles this case with default header values.

Any other errors
*/
type GetExecutionDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the get execution default response
func (o *GetExecutionDefault) Code() int {
	return o._statusCode
}

func (o *GetExecutionDefault) Error() string {
	return fmt.Sprintf("[GET /projects/{projectId}/executions/{id}][%d] getExecution default  %+v", o._statusCode, o.Payload)
}

func (o *GetExecutionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
