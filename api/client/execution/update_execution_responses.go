// Code generated by go-swagger; DO NOT EDIT.

package execution

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/testra/testra-cli/api/models"
)

// UpdateExecutionReader is a Reader for the UpdateExecution structure.
type UpdateExecutionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateExecutionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateExecutionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewUpdateExecutionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdateExecutionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateExecutionOK creates a UpdateExecutionOK with default headers values
func NewUpdateExecutionOK() *UpdateExecutionOK {
	return &UpdateExecutionOK{}
}

/*UpdateExecutionOK handles this case with default header values.

Successful update of given Execution
*/
type UpdateExecutionOK struct {
	Payload *models.Execution
}

func (o *UpdateExecutionOK) Error() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/executions/{id}][%d] updateExecutionOK  %+v", 200, o.Payload)
}

func (o *UpdateExecutionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Execution)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateExecutionNotFound creates a UpdateExecutionNotFound with default headers values
func NewUpdateExecutionNotFound() *UpdateExecutionNotFound {
	return &UpdateExecutionNotFound{}
}

/*UpdateExecutionNotFound handles this case with default header values.

Execution not found
*/
type UpdateExecutionNotFound struct {
	Payload *models.ErrorResponse
}

func (o *UpdateExecutionNotFound) Error() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/executions/{id}][%d] updateExecutionNotFound  %+v", 404, o.Payload)
}

func (o *UpdateExecutionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateExecutionDefault creates a UpdateExecutionDefault with default headers values
func NewUpdateExecutionDefault(code int) *UpdateExecutionDefault {
	return &UpdateExecutionDefault{
		_statusCode: code,
	}
}

/*UpdateExecutionDefault handles this case with default header values.

Any other errors
*/
type UpdateExecutionDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the update execution default response
func (o *UpdateExecutionDefault) Code() int {
	return o._statusCode
}

func (o *UpdateExecutionDefault) Error() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/executions/{id}][%d] updateExecution default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateExecutionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
