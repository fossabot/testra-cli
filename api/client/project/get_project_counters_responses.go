// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/testra/testra-cli/api/models"
)

// GetProjectCountersReader is a Reader for the GetProjectCounters structure.
type GetProjectCountersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProjectCountersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetProjectCountersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetProjectCountersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetProjectCountersDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetProjectCountersOK creates a GetProjectCountersOK with default headers values
func NewGetProjectCountersOK() *GetProjectCountersOK {
	return &GetProjectCountersOK{}
}

/*GetProjectCountersOK handles this case with default header values.

Success return of counts
*/
type GetProjectCountersOK struct {
	Payload *models.ProjectCounter
}

func (o *GetProjectCountersOK) Error() string {
	return fmt.Sprintf("[GET /projects/{id}/counters][%d] getProjectCountersOK  %+v", 200, o.Payload)
}

func (o *GetProjectCountersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectCounter)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProjectCountersNotFound creates a GetProjectCountersNotFound with default headers values
func NewGetProjectCountersNotFound() *GetProjectCountersNotFound {
	return &GetProjectCountersNotFound{}
}

/*GetProjectCountersNotFound handles this case with default header values.

Project not found
*/
type GetProjectCountersNotFound struct {
	Payload *models.ErrorResponse
}

func (o *GetProjectCountersNotFound) Error() string {
	return fmt.Sprintf("[GET /projects/{id}/counters][%d] getProjectCountersNotFound  %+v", 404, o.Payload)
}

func (o *GetProjectCountersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProjectCountersDefault creates a GetProjectCountersDefault with default headers values
func NewGetProjectCountersDefault(code int) *GetProjectCountersDefault {
	return &GetProjectCountersDefault{
		_statusCode: code,
	}
}

/*GetProjectCountersDefault handles this case with default header values.

Any other errors
*/
type GetProjectCountersDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the get project counters default response
func (o *GetProjectCountersDefault) Code() int {
	return o._statusCode
}

func (o *GetProjectCountersDefault) Error() string {
	return fmt.Sprintf("[GET /projects/{id}/counters][%d] getProjectCounters default  %+v", o._statusCode, o.Payload)
}

func (o *GetProjectCountersDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
