// Code generated by go-swagger; DO NOT EDIT.

package result

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new result API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for result API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateResult creates a new result

Adds a new result into Testra app. It takes a JSON object containing a name that was not used before.
*/
func (a *Client) CreateResult(params *CreateResultParams) (*CreateResultCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResultParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createResult",
		Method:             "POST",
		PathPattern:        "/projects/{projectId}/executions/{executionId}/results",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateResultCreated), nil

}

/*
DeleteResult deletes result info
*/
func (a *Client) DeleteResult(params *DeleteResultParams) (*DeleteResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteResultParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteResult",
		Method:             "DELETE",
		PathPattern:        "/projects/{projectId}/executions/{executionId}/results/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteResultOK), nil

}

/*
GetResult gets result by id

Returns single result info for the given id
*/
func (a *Client) GetResult(params *GetResultParams) (*GetResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResultParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResult",
		Method:             "GET",
		PathPattern:        "/projects/{projectId}/executions/{executionId}/results/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetResultOK), nil

}

/*
GetResults lists of all results

Returns list of all results within given project and execution

*/
func (a *Client) GetResults(params *GetResultsParams) (*GetResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResultsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResults",
		Method:             "GET",
		PathPattern:        "/projects/{projectId}/executions/{executionId}/results",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetResultsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetResultsOK), nil

}

/*
UpdateResult updates result info

Updates exiting result using result id

*/
func (a *Client) UpdateResult(params *UpdateResultParams) (*UpdateResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateResultParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateResult",
		Method:             "PUT",
		PathPattern:        "/projects/{projectId}/executions/{executionId}/results/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateResultOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
