// Code generated by go-swagger; DO NOT EDIT.

package scenario

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new scenario API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for scenario API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateScenario creates a new scenario

Adds a new scenario into Testra app. It takes a JSON object containing a name that was not used before.
*/
func (a *Client) CreateScenario(params *CreateScenarioParams) (*CreateScenarioCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateScenarioParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createScenario",
		Method:             "POST",
		PathPattern:        "/projects/{projectId}/scenarios",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateScenarioReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateScenarioCreated), nil

}

/*
DeleteScenario deletes scenario info
*/
func (a *Client) DeleteScenario(params *DeleteScenarioParams) (*DeleteScenarioOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScenarioParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteScenario",
		Method:             "DELETE",
		PathPattern:        "/projects/{projectId}/scenarios/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteScenarioReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteScenarioOK), nil

}

/*
GetScenario gets scenario by id

Returns single scenario info for the given id
*/
func (a *Client) GetScenario(params *GetScenarioParams) (*GetScenarioOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScenarioParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getScenario",
		Method:             "GET",
		PathPattern:        "/projects/{projectId}/scenarios/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetScenarioReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetScenarioOK), nil

}

/*
GetScenarios lists all scenarios

Returns list of all scenarios within given project

*/
func (a *Client) GetScenarios(params *GetScenariosParams) (*GetScenariosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScenariosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getScenarios",
		Method:             "GET",
		PathPattern:        "/projects/{projectId}/scenarios",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetScenariosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetScenariosOK), nil

}

/*
UpdateScenario updates scenario info

Updates exiting scenario using scenario id

*/
func (a *Client) UpdateScenario(params *UpdateScenarioParams) (*UpdateScenarioOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateScenarioParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateScenario",
		Method:             "PUT",
		PathPattern:        "/projects/{projectId}/scenarios/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateScenarioReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateScenarioOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
