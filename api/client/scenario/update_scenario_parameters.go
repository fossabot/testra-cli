// Code generated by go-swagger; DO NOT EDIT.

package scenario

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/testra-tech/testra-cli/api/models"
)

// NewUpdateScenarioParams creates a new UpdateScenarioParams object
// with the default values initialized.
func NewUpdateScenarioParams() *UpdateScenarioParams {
	var ()
	return &UpdateScenarioParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateScenarioParamsWithTimeout creates a new UpdateScenarioParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateScenarioParamsWithTimeout(timeout time.Duration) *UpdateScenarioParams {
	var ()
	return &UpdateScenarioParams{

		timeout: timeout,
	}
}

// NewUpdateScenarioParamsWithContext creates a new UpdateScenarioParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateScenarioParamsWithContext(ctx context.Context) *UpdateScenarioParams {
	var ()
	return &UpdateScenarioParams{

		Context: ctx,
	}
}

// NewUpdateScenarioParamsWithHTTPClient creates a new UpdateScenarioParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateScenarioParamsWithHTTPClient(client *http.Client) *UpdateScenarioParams {
	var ()
	return &UpdateScenarioParams{
		HTTPClient: client,
	}
}

/*UpdateScenarioParams contains all the parameters to send to the API endpoint
for the update scenario operation typically these are written to a http.Request
*/
type UpdateScenarioParams struct {

	/*Body*/
	Body *models.ScenarioRequest
	/*ID
	  Scenario Id

	*/
	ID string
	/*ProjectID
	  Project Id

	*/
	ProjectID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update scenario params
func (o *UpdateScenarioParams) WithTimeout(timeout time.Duration) *UpdateScenarioParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update scenario params
func (o *UpdateScenarioParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update scenario params
func (o *UpdateScenarioParams) WithContext(ctx context.Context) *UpdateScenarioParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update scenario params
func (o *UpdateScenarioParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update scenario params
func (o *UpdateScenarioParams) WithHTTPClient(client *http.Client) *UpdateScenarioParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update scenario params
func (o *UpdateScenarioParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the update scenario params
func (o *UpdateScenarioParams) WithBody(body *models.ScenarioRequest) *UpdateScenarioParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update scenario params
func (o *UpdateScenarioParams) SetBody(body *models.ScenarioRequest) {
	o.Body = body
}

// WithID adds the id to the update scenario params
func (o *UpdateScenarioParams) WithID(id string) *UpdateScenarioParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the update scenario params
func (o *UpdateScenarioParams) SetID(id string) {
	o.ID = id
}

// WithProjectID adds the projectID to the update scenario params
func (o *UpdateScenarioParams) WithProjectID(projectID string) *UpdateScenarioParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the update scenario params
func (o *UpdateScenarioParams) SetProjectID(projectID string) {
	o.ProjectID = projectID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateScenarioParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param projectId
	if err := r.SetPathParam("projectId", o.ProjectID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
