// Code generated by go-swagger; DO NOT EDIT.

package scenario

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/testra/testra-cli/api/models"
)

// UpdateScenarioReader is a Reader for the UpdateScenario structure.
type UpdateScenarioReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateScenarioReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateScenarioOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewUpdateScenarioNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdateScenarioDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateScenarioOK creates a UpdateScenarioOK with default headers values
func NewUpdateScenarioOK() *UpdateScenarioOK {
	return &UpdateScenarioOK{}
}

/*UpdateScenarioOK handles this case with default header values.

Successful update of given Scenario
*/
type UpdateScenarioOK struct {
	Payload *models.Scenario
}

func (o *UpdateScenarioOK) Error() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/scenarios/{id}][%d] updateScenarioOK  %+v", 200, o.Payload)
}

func (o *UpdateScenarioOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Scenario)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScenarioNotFound creates a UpdateScenarioNotFound with default headers values
func NewUpdateScenarioNotFound() *UpdateScenarioNotFound {
	return &UpdateScenarioNotFound{}
}

/*UpdateScenarioNotFound handles this case with default header values.

Scenario not found
*/
type UpdateScenarioNotFound struct {
	Payload *models.ErrorResponse
}

func (o *UpdateScenarioNotFound) Error() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/scenarios/{id}][%d] updateScenarioNotFound  %+v", 404, o.Payload)
}

func (o *UpdateScenarioNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScenarioDefault creates a UpdateScenarioDefault with default headers values
func NewUpdateScenarioDefault(code int) *UpdateScenarioDefault {
	return &UpdateScenarioDefault{
		_statusCode: code,
	}
}

/*UpdateScenarioDefault handles this case with default header values.

Any other errors
*/
type UpdateScenarioDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the update scenario default response
func (o *UpdateScenarioDefault) Code() int {
	return o._statusCode
}

func (o *UpdateScenarioDefault) Error() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/scenarios/{id}][%d] updateScenario default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateScenarioDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
