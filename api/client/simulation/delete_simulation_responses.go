// Code generated by go-swagger; DO NOT EDIT.

package simulation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/testra/testra-cli/api/models"
)

// DeleteSimulationReader is a Reader for the DeleteSimulation structure.
type DeleteSimulationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSimulationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteSimulationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewDeleteSimulationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeleteSimulationDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteSimulationOK creates a DeleteSimulationOK with default headers values
func NewDeleteSimulationOK() *DeleteSimulationOK {
	return &DeleteSimulationOK{}
}

/*DeleteSimulationOK handles this case with default header values.

Successful deletion of given simulation
*/
type DeleteSimulationOK struct {
	Payload *models.Simulation
}

func (o *DeleteSimulationOK) Error() string {
	return fmt.Sprintf("[DELETE /projects/{projectId}/executions/{executionId}/simulation/{id}][%d] deleteSimulationOK  %+v", 200, o.Payload)
}

func (o *DeleteSimulationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Simulation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSimulationNotFound creates a DeleteSimulationNotFound with default headers values
func NewDeleteSimulationNotFound() *DeleteSimulationNotFound {
	return &DeleteSimulationNotFound{}
}

/*DeleteSimulationNotFound handles this case with default header values.

Simulation not found
*/
type DeleteSimulationNotFound struct {
	Payload *models.ErrorResponse
}

func (o *DeleteSimulationNotFound) Error() string {
	return fmt.Sprintf("[DELETE /projects/{projectId}/executions/{executionId}/simulation/{id}][%d] deleteSimulationNotFound  %+v", 404, o.Payload)
}

func (o *DeleteSimulationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSimulationDefault creates a DeleteSimulationDefault with default headers values
func NewDeleteSimulationDefault(code int) *DeleteSimulationDefault {
	return &DeleteSimulationDefault{
		_statusCode: code,
	}
}

/*DeleteSimulationDefault handles this case with default header values.

Any other errors
*/
type DeleteSimulationDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the delete simulation default response
func (o *DeleteSimulationDefault) Code() int {
	return o._statusCode
}

func (o *DeleteSimulationDefault) Error() string {
	return fmt.Sprintf("[DELETE /projects/{projectId}/executions/{executionId}/simulation/{id}][%d] deleteSimulation default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteSimulationDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
