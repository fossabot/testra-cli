// Code generated by go-swagger; DO NOT EDIT.

package testcase

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTestcasesParams creates a new GetTestcasesParams object
// with the default values initialized.
func NewGetTestcasesParams() *GetTestcasesParams {
	var ()
	return &GetTestcasesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTestcasesParamsWithTimeout creates a new GetTestcasesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTestcasesParamsWithTimeout(timeout time.Duration) *GetTestcasesParams {
	var ()
	return &GetTestcasesParams{

		timeout: timeout,
	}
}

// NewGetTestcasesParamsWithContext creates a new GetTestcasesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTestcasesParamsWithContext(ctx context.Context) *GetTestcasesParams {
	var ()
	return &GetTestcasesParams{

		Context: ctx,
	}
}

// NewGetTestcasesParamsWithHTTPClient creates a new GetTestcasesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTestcasesParamsWithHTTPClient(client *http.Client) *GetTestcasesParams {
	var ()
	return &GetTestcasesParams{
		HTTPClient: client,
	}
}

/*GetTestcasesParams contains all the parameters to send to the API endpoint
for the get testcases operation typically these are written to a http.Request
*/
type GetTestcasesParams struct {

	/*NamespaceID
	  Namespace Id

	*/
	NamespaceID *string
	/*ProjectID
	  Project Id

	*/
	ProjectID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get testcases params
func (o *GetTestcasesParams) WithTimeout(timeout time.Duration) *GetTestcasesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get testcases params
func (o *GetTestcasesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get testcases params
func (o *GetTestcasesParams) WithContext(ctx context.Context) *GetTestcasesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get testcases params
func (o *GetTestcasesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get testcases params
func (o *GetTestcasesParams) WithHTTPClient(client *http.Client) *GetTestcasesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get testcases params
func (o *GetTestcasesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNamespaceID adds the namespaceID to the get testcases params
func (o *GetTestcasesParams) WithNamespaceID(namespaceID *string) *GetTestcasesParams {
	o.SetNamespaceID(namespaceID)
	return o
}

// SetNamespaceID adds the namespaceId to the get testcases params
func (o *GetTestcasesParams) SetNamespaceID(namespaceID *string) {
	o.NamespaceID = namespaceID
}

// WithProjectID adds the projectID to the get testcases params
func (o *GetTestcasesParams) WithProjectID(projectID string) *GetTestcasesParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the get testcases params
func (o *GetTestcasesParams) SetProjectID(projectID string) {
	o.ProjectID = projectID
}

// WriteToRequest writes these params to a swagger request
func (o *GetTestcasesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.NamespaceID != nil {

		// query param namespaceId
		var qrNamespaceID string
		if o.NamespaceID != nil {
			qrNamespaceID = *o.NamespaceID
		}
		qNamespaceID := qrNamespaceID
		if qNamespaceID != "" {
			if err := r.SetQueryParam("namespaceId", qNamespaceID); err != nil {
				return err
			}
		}

	}

	// path param projectId
	if err := r.SetPathParam("projectId", o.ProjectID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
