// Code generated by go-swagger; DO NOT EDIT.

package testcase

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new testcase API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for testcase API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateTestcase creates a new testcase

Adds a new testcase into Testra app. It takes a JSON object containing a name that was not used before.
*/
func (a *Client) CreateTestcase(params *CreateTestcaseParams) (*CreateTestcaseCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTestcaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTestcase",
		Method:             "POST",
		PathPattern:        "/projects/{projectId}/testcases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateTestcaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateTestcaseCreated), nil

}

/*
DeleteTestcase deletes testcase info
*/
func (a *Client) DeleteTestcase(params *DeleteTestcaseParams) (*DeleteTestcaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTestcaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTestcase",
		Method:             "DELETE",
		PathPattern:        "/projects/{projectId}/testcases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTestcaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTestcaseOK), nil

}

/*
GetTestcase gets testcase by id

Returns single testcase info for the given id
*/
func (a *Client) GetTestcase(params *GetTestcaseParams) (*GetTestcaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTestcaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTestcase",
		Method:             "GET",
		PathPattern:        "/projects/{projectId}/testcases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTestcaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTestcaseOK), nil

}

/*
GetTestcases lists all testcases

Returns list of all testcases within given project

*/
func (a *Client) GetTestcases(params *GetTestcasesParams) (*GetTestcasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTestcasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTestcases",
		Method:             "GET",
		PathPattern:        "/projects/{projectId}/testcases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTestcasesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTestcasesOK), nil

}

/*
UpdateTestcase updates testcase info

Updates exiting testcase using testcase id

*/
func (a *Client) UpdateTestcase(params *UpdateTestcaseParams) (*UpdateTestcaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTestcaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTestcase",
		Method:             "PUT",
		PathPattern:        "/projects/{projectId}/testcases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateTestcaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateTestcaseOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
