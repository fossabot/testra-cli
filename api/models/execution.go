// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Execution TestExecution
// swagger:model Execution
type Execution struct {

	// branch
	// Required: true
	Branch *string `json:"branch"`

	// build ref
	BuildRef string `json:"buildRef,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// end time
	// Required: true
	EndTime *int64 `json:"endTime"`

	// environment
	// Required: true
	Environment *string `json:"environment"`

	// group ids
	// Required: true
	GroupIds []string `json:"groupIds"`

	// host
	// Required: true
	Host *string `json:"host"`

	// id
	// Required: true
	ID *string `json:"id"`

	// parallel
	// Required: true
	Parallel *bool `json:"parallel"`

	// project Id
	// Required: true
	ProjectID *string `json:"projectId"`

	// start time
	// Required: true
	StartTime *int64 `json:"startTime"`

	// tags
	// Required: true
	Tags []string `json:"tags"`
}

// Validate validates this execution
func (m *Execution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParallel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Execution) validateBranch(formats strfmt.Registry) error {

	if err := validate.Required("branch", "body", m.Branch); err != nil {
		return err
	}

	return nil
}

func (m *Execution) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("endTime", "body", m.EndTime); err != nil {
		return err
	}

	return nil
}

func (m *Execution) validateEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("environment", "body", m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *Execution) validateGroupIds(formats strfmt.Registry) error {

	if err := validate.Required("groupIds", "body", m.GroupIds); err != nil {
		return err
	}

	return nil
}

func (m *Execution) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *Execution) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Execution) validateParallel(formats strfmt.Registry) error {

	if err := validate.Required("parallel", "body", m.Parallel); err != nil {
		return err
	}

	return nil
}

func (m *Execution) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("projectId", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

func (m *Execution) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("startTime", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

func (m *Execution) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Execution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Execution) UnmarshalBinary(b []byte) error {
	var res Execution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
