// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExecutionRequest TestExecutionRequest
// swagger:model ExecutionRequest
type ExecutionRequest struct {

	// branch
	Branch string `json:"branch,omitempty"`

	// build ref
	BuildRef string `json:"buildRef,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// end time
	EndTime int64 `json:"endTime,omitempty"`

	// environment
	Environment string `json:"environment,omitempty"`

	// host
	// Required: true
	Host *string `json:"host"`

	// parallel
	// Required: true
	Parallel *bool `json:"parallel"`

	// tags
	Tags []string `json:"tags"`
}

// Validate validates this execution request
func (m *ExecutionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParallel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExecutionRequest) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionRequest) validateParallel(formats strfmt.Registry) error {

	if err := validate.Required("parallel", "body", m.Parallel); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExecutionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExecutionRequest) UnmarshalBinary(b []byte) error {
	var res ExecutionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
