// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Result result
// swagger:model Result
type Result string

const (

	// ResultPASSED captures enum value "PASSED"
	ResultPASSED Result = "PASSED"

	// ResultFAILED captures enum value "FAILED"
	ResultFAILED Result = "FAILED"

	// ResultPENDING captures enum value "PENDING"
	ResultPENDING Result = "PENDING"

	// ResultSKIPPED captures enum value "SKIPPED"
	ResultSKIPPED Result = "SKIPPED"

	// ResultAMBIGUOUS captures enum value "AMBIGUOUS"
	ResultAMBIGUOUS Result = "AMBIGUOUS"

	// ResultUNDEFINED captures enum value "UNDEFINED"
	ResultUNDEFINED Result = "UNDEFINED"

	// ResultUNKNOWN captures enum value "UNKNOWN"
	ResultUNKNOWN Result = "UNKNOWN"
)

// for schema
var resultEnum []interface{}

func init() {
	var res []Result
	if err := json.Unmarshal([]byte(`["PASSED","FAILED","PENDING","SKIPPED","AMBIGUOUS","UNDEFINED","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resultEnum = append(resultEnum, v)
	}
}

func (m Result) validateResultEnum(path, location string, value Result) error {
	if err := validate.Enum(path, location, value, resultEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this result
func (m Result) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateResultEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
