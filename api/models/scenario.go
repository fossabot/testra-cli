// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Scenario Scenario
// swagger:model Scenario
type Scenario struct {

	// after
	// Required: true
	After []*TestStep `json:"after"`

	// background steps
	// Required: true
	BackgroundSteps []*TestStep `json:"backgroundSteps"`

	// before
	// Required: true
	Before []*TestStep `json:"before"`

	// feature description
	// Required: true
	FeatureDescription *string `json:"featureDescription"`

	// feature Id
	// Required: true
	FeatureID *string `json:"featureId"`

	// id
	// Required: true
	ID *string `json:"id"`

	// manual
	Manual bool `json:"manual,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// project Id
	// Required: true
	ProjectID *string `json:"projectId"`

	// steps
	// Required: true
	Steps []*TestStep `json:"steps"`

	// tags
	// Required: true
	Tags []string `json:"tags"`
}

// Validate validates this scenario
func (m *Scenario) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAfter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackgroundSteps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBefore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatureDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatureID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSteps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Scenario) validateAfter(formats strfmt.Registry) error {

	if err := validate.Required("after", "body", m.After); err != nil {
		return err
	}

	for i := 0; i < len(m.After); i++ {
		if swag.IsZero(m.After[i]) { // not required
			continue
		}

		if m.After[i] != nil {
			if err := m.After[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("after" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Scenario) validateBackgroundSteps(formats strfmt.Registry) error {

	if err := validate.Required("backgroundSteps", "body", m.BackgroundSteps); err != nil {
		return err
	}

	for i := 0; i < len(m.BackgroundSteps); i++ {
		if swag.IsZero(m.BackgroundSteps[i]) { // not required
			continue
		}

		if m.BackgroundSteps[i] != nil {
			if err := m.BackgroundSteps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backgroundSteps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Scenario) validateBefore(formats strfmt.Registry) error {

	if err := validate.Required("before", "body", m.Before); err != nil {
		return err
	}

	for i := 0; i < len(m.Before); i++ {
		if swag.IsZero(m.Before[i]) { // not required
			continue
		}

		if m.Before[i] != nil {
			if err := m.Before[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("before" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Scenario) validateFeatureDescription(formats strfmt.Registry) error {

	if err := validate.Required("featureDescription", "body", m.FeatureDescription); err != nil {
		return err
	}

	return nil
}

func (m *Scenario) validateFeatureID(formats strfmt.Registry) error {

	if err := validate.Required("featureId", "body", m.FeatureID); err != nil {
		return err
	}

	return nil
}

func (m *Scenario) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Scenario) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Scenario) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("projectId", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

func (m *Scenario) validateSteps(formats strfmt.Registry) error {

	if err := validate.Required("steps", "body", m.Steps); err != nil {
		return err
	}

	for i := 0; i < len(m.Steps); i++ {
		if swag.IsZero(m.Steps[i]) { // not required
			continue
		}

		if m.Steps[i] != nil {
			if err := m.Steps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("steps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Scenario) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Scenario) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Scenario) UnmarshalBinary(b []byte) error {
	var res Scenario
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
