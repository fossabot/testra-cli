// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StepResult Step result
// swagger:model StepResult
type StepResult struct {

	// duration in ms
	// Required: true
	DurationInMs *int64 `json:"durationInMs"`

	// error
	Error string `json:"error,omitempty"`

	// index
	// Required: true
	Index *int64 `json:"index"`

	// status
	// Required: true
	// Enum: [PASSED FAILED PENDING SKIPPED AMBIGUOUS UNDEFINED UNKNOWN]
	Status *string `json:"status"`
}

// Validate validates this step result
func (m *StepResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDurationInMs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StepResult) validateDurationInMs(formats strfmt.Registry) error {

	if err := validate.Required("durationInMs", "body", m.DurationInMs); err != nil {
		return err
	}

	return nil
}

func (m *StepResult) validateIndex(formats strfmt.Registry) error {

	if err := validate.Required("index", "body", m.Index); err != nil {
		return err
	}

	return nil
}

var stepResultTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PASSED","FAILED","PENDING","SKIPPED","AMBIGUOUS","UNDEFINED","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stepResultTypeStatusPropEnum = append(stepResultTypeStatusPropEnum, v)
	}
}

const (

	// StepResultStatusPASSED captures enum value "PASSED"
	StepResultStatusPASSED string = "PASSED"

	// StepResultStatusFAILED captures enum value "FAILED"
	StepResultStatusFAILED string = "FAILED"

	// StepResultStatusPENDING captures enum value "PENDING"
	StepResultStatusPENDING string = "PENDING"

	// StepResultStatusSKIPPED captures enum value "SKIPPED"
	StepResultStatusSKIPPED string = "SKIPPED"

	// StepResultStatusAMBIGUOUS captures enum value "AMBIGUOUS"
	StepResultStatusAMBIGUOUS string = "AMBIGUOUS"

	// StepResultStatusUNDEFINED captures enum value "UNDEFINED"
	StepResultStatusUNDEFINED string = "UNDEFINED"

	// StepResultStatusUNKNOWN captures enum value "UNKNOWN"
	StepResultStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (m *StepResult) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, stepResultTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StepResult) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StepResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StepResult) UnmarshalBinary(b []byte) error {
	var res StepResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
