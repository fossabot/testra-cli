// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestGroup TestGroup
// swagger:model TestGroup
type TestGroup struct {

	// description
	// Required: true
	Description *string `json:"description"`

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// project Id
	// Required: true
	ProjectID *string `json:"projectId"`

	// sub group
	// Required: true
	SubGroup *string `json:"subGroup"`

	// type
	// Required: true
	// Enum: [FEATURE NAMESPACE]
	Type *string `json:"type"`
}

// Validate validates this test group
func (m *TestGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestGroup) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *TestGroup) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TestGroup) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TestGroup) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("projectId", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

func (m *TestGroup) validateSubGroup(formats strfmt.Registry) error {

	if err := validate.Required("subGroup", "body", m.SubGroup); err != nil {
		return err
	}

	return nil
}

var testGroupTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FEATURE","NAMESPACE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		testGroupTypeTypePropEnum = append(testGroupTypeTypePropEnum, v)
	}
}

const (

	// TestGroupTypeFEATURE captures enum value "FEATURE"
	TestGroupTypeFEATURE string = "FEATURE"

	// TestGroupTypeNAMESPACE captures enum value "NAMESPACE"
	TestGroupTypeNAMESPACE string = "NAMESPACE"
)

// prop value enum
func (m *TestGroup) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, testGroupTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TestGroup) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestGroup) UnmarshalBinary(b []byte) error {
	var res TestGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
