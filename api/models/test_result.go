// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestResult TestResult
// swagger:model TestResult
type TestResult struct {

	// attachments
	Attachments []*Attachment `json:"attachments"`

	// duration in ms
	// Required: true
	DurationInMs *int64 `json:"durationInMs"`

	// end time
	// Required: true
	EndTime *int64 `json:"endTime"`

	// error
	Error string `json:"error,omitempty"`

	// expected to fail
	ExpectedToFail bool `json:"expectedToFail,omitempty"`

	// group Id
	// Required: true
	GroupID *string `json:"groupId"`

	// id
	// Required: true
	ID *string `json:"id"`

	// result type
	// Required: true
	// Enum: [SCENARIO TEST_CASE]
	ResultType *string `json:"resultType"`

	// retry count
	// Required: true
	RetryCount *int64 `json:"retryCount"`

	// start time
	// Required: true
	StartTime *int64 `json:"startTime"`

	// status
	// Required: true
	// Enum: [PASSED FAILED PENDING SKIPPED AMBIGUOUS UNDEFINED UNKNOWN]
	Status *string `json:"status"`

	// step results
	StepResults []*StepResult `json:"stepResults"`

	// target Id
	// Required: true
	TargetID *string `json:"targetId"`
}

// Validate validates this test result
func (m *TestResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDurationInMs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResultType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetryCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStepResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestResult) validateAttachments(formats strfmt.Registry) error {

	if swag.IsZero(m.Attachments) { // not required
		return nil
	}

	for i := 0; i < len(m.Attachments); i++ {
		if swag.IsZero(m.Attachments[i]) { // not required
			continue
		}

		if m.Attachments[i] != nil {
			if err := m.Attachments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attachments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestResult) validateDurationInMs(formats strfmt.Registry) error {

	if err := validate.Required("durationInMs", "body", m.DurationInMs); err != nil {
		return err
	}

	return nil
}

func (m *TestResult) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("endTime", "body", m.EndTime); err != nil {
		return err
	}

	return nil
}

func (m *TestResult) validateGroupID(formats strfmt.Registry) error {

	if err := validate.Required("groupId", "body", m.GroupID); err != nil {
		return err
	}

	return nil
}

func (m *TestResult) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var testResultTypeResultTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SCENARIO","TEST_CASE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		testResultTypeResultTypePropEnum = append(testResultTypeResultTypePropEnum, v)
	}
}

const (

	// TestResultResultTypeSCENARIO captures enum value "SCENARIO"
	TestResultResultTypeSCENARIO string = "SCENARIO"

	// TestResultResultTypeTESTCASE captures enum value "TEST_CASE"
	TestResultResultTypeTESTCASE string = "TEST_CASE"
)

// prop value enum
func (m *TestResult) validateResultTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, testResultTypeResultTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TestResult) validateResultType(formats strfmt.Registry) error {

	if err := validate.Required("resultType", "body", m.ResultType); err != nil {
		return err
	}

	// value enum
	if err := m.validateResultTypeEnum("resultType", "body", *m.ResultType); err != nil {
		return err
	}

	return nil
}

func (m *TestResult) validateRetryCount(formats strfmt.Registry) error {

	if err := validate.Required("retryCount", "body", m.RetryCount); err != nil {
		return err
	}

	return nil
}

func (m *TestResult) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("startTime", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

var testResultTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PASSED","FAILED","PENDING","SKIPPED","AMBIGUOUS","UNDEFINED","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		testResultTypeStatusPropEnum = append(testResultTypeStatusPropEnum, v)
	}
}

const (

	// TestResultStatusPASSED captures enum value "PASSED"
	TestResultStatusPASSED string = "PASSED"

	// TestResultStatusFAILED captures enum value "FAILED"
	TestResultStatusFAILED string = "FAILED"

	// TestResultStatusPENDING captures enum value "PENDING"
	TestResultStatusPENDING string = "PENDING"

	// TestResultStatusSKIPPED captures enum value "SKIPPED"
	TestResultStatusSKIPPED string = "SKIPPED"

	// TestResultStatusAMBIGUOUS captures enum value "AMBIGUOUS"
	TestResultStatusAMBIGUOUS string = "AMBIGUOUS"

	// TestResultStatusUNDEFINED captures enum value "UNDEFINED"
	TestResultStatusUNDEFINED string = "UNDEFINED"

	// TestResultStatusUNKNOWN captures enum value "UNKNOWN"
	TestResultStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (m *TestResult) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, testResultTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TestResult) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *TestResult) validateStepResults(formats strfmt.Registry) error {

	if swag.IsZero(m.StepResults) { // not required
		return nil
	}

	for i := 0; i < len(m.StepResults); i++ {
		if swag.IsZero(m.StepResults[i]) { // not required
			continue
		}

		if m.StepResults[i] != nil {
			if err := m.StepResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stepResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestResult) validateTargetID(formats strfmt.Registry) error {

	if err := validate.Required("targetId", "body", m.TargetID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestResult) UnmarshalBinary(b []byte) error {
	var res TestResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
