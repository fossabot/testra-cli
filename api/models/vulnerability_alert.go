// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VulnerabilityAlert VulnerabilityAlert
// swagger:model VulnerabilityAlert
type VulnerabilityAlert struct {

	// description
	// Required: true
	Description *string `json:"description"`

	// domain
	// Required: true
	Domain *string `json:"domain"`

	// name
	// Required: true
	Name *string `json:"name"`

	// other info
	// Required: true
	OtherInfo *string `json:"otherInfo"`

	// reference
	// Required: true
	Reference *string `json:"reference"`

	// risk level
	// Required: true
	RiskLevel *string `json:"riskLevel"`

	// solution
	// Required: true
	Solution *string `json:"solution"`

	// urls
	// Required: true
	Urls []*URLResource `json:"urls"`
}

// Validate validates this vulnerability alert
func (m *VulnerabilityAlert) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRiskLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSolution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUrls(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerabilityAlert) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilityAlert) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilityAlert) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilityAlert) validateOtherInfo(formats strfmt.Registry) error {

	if err := validate.Required("otherInfo", "body", m.OtherInfo); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilityAlert) validateReference(formats strfmt.Registry) error {

	if err := validate.Required("reference", "body", m.Reference); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilityAlert) validateRiskLevel(formats strfmt.Registry) error {

	if err := validate.Required("riskLevel", "body", m.RiskLevel); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilityAlert) validateSolution(formats strfmt.Registry) error {

	if err := validate.Required("solution", "body", m.Solution); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilityAlert) validateUrls(formats strfmt.Registry) error {

	if err := validate.Required("urls", "body", m.Urls); err != nil {
		return err
	}

	for i := 0; i < len(m.Urls); i++ {
		if swag.IsZero(m.Urls[i]) { // not required
			continue
		}

		if m.Urls[i] != nil {
			if err := m.Urls[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("urls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VulnerabilityAlert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VulnerabilityAlert) UnmarshalBinary(b []byte) error {
	var res VulnerabilityAlert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
